# Generated by Django 5.1.6 on 2025-02-15 03:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImageWithDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('image', models.ImageField(upload_to='images/', verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Image with Details',
                'verbose_name_plural': 'Images with Details',
            },
        ),
        migrations.CreateModel(
            name='DroneUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('contact_no', models.CharField(max_length=15, verbose_name='Contact No')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('drone_experience', models.TextField(verbose_name='Your Drone Related Experience')),
                ('citizenship_upload', models.FileField(upload_to='citizenship/', verbose_name='Upload Citizenship')),
                ('involvement_type', models.CharField(choices=[('individual', 'Individual / Freelancer'), ('organizational', 'Organizational')], max_length=20, verbose_name='Involved as Organizational or Individual')),
                ('organization_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Involved Organization Name')),
                ('organization_weblink', models.URLField(blank=True, null=True, verbose_name='Organization Weblink')),
                ('organization_social_media_link', models.URLField(blank=True, null=True, verbose_name='Organization Social Media Link')),
                ('regd_document_upload', models.FileField(blank=True, null=True, upload_to='organization_docs/', verbose_name='Regd Document Upload')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Drone Enthusiast',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
